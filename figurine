import cv2
import mediapipe as mp
from PIL import Image, ImageFilter
import numpy as np

# Initialize MediaPipe Pose
mp_pose = mp.solutions.pose
mp_drawing = mp.solutions.drawing_utils
pose = mp_pose.Pose()

def apply_hand_drawn_style(image):
    """
    Apply a hand-drawn style effect to the image using PIL.
    """
    pil_image = Image.fromarray(image)
    # Convert to grayscale and apply edge enhancement
    sketch = pil_image.convert("L").filter(ImageFilter.CONTOUR)
    return np.array(sketch)

def overlay_clothing(image, landmarks, clothing_image_path):
    """
    Overlay clothing onto the user based on pose landmarks.
    """
    clothing = cv2.imread(clothing_image_path, cv2.IMREAD_UNCHANGED)
    # Example: Align clothing with shoulders
    left_shoulder = landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value]
    right_shoulder = landmarks[mp_pose.PoseLandmark.RIGHT_SHOULDER.value]
    
    # Calculate position and size
    shoulder_width = int(np.linalg.norm(
        np.array([left_shoulder.x, left_shoulder.y]) -
        np.array([right_shoulder.x, right_shoulder.y])
    ) * image.shape[1])
    
    # Resize and position the clothing
    clothing_resized = cv2.resize(clothing, (shoulder_width, int(shoulder_width * 1.5)))
    x, y = int(left_shoulder.x * image.shape[1]), int(left_shoulder.y * image.shape[0])
    y -= int(clothing_resized.shape[0] * 0.5)  # Adjust for alignment
    
    # Overlay clothing
    overlay = image.copy()
    for i in range(clothing_resized.shape[0]):
        for j in range(clothing_resized.shape[1]):
            if clothing_resized[i, j, 3] > 0:  # If not transparent
                overlay[y + i, x + j] = clothing_resized[i, j, :3]
    return overlay

def generate_figurine(user_image_path, clothing_image_path):
    """
    Generate a custom figurine of the user with chosen clothing.
    """
    image = cv2.imread(user_image_path)
    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    results = pose.process(image_rgb)
    
    if results.pose_landmarks:
        # Apply clothing overlay
        styled_image = overlay_clothing(image, results.pose_landmarks.landmark, clothing_image_path)
        # Apply hand-drawn style
        final_image = apply_hand_drawn_style(styled_image)
        return final_image
    else:
        print("No pose detected.")
        return None

if __name__ == "__main__":
    user_image_path = "user_photo.jpg"  # Path to user's photo
    clothing_image_path = "clothing.png"  # Path to clothing image
    output_path = "figurine_output.jpg"
    
    figurine = generate_figurine(user_image_path, clothing_image_path)
    if figurine is not None:
        cv2.imwrite(output_path, figurine)
        print(f"Figurine saved at {output_path}")
    else:
        print("Could not generate figurine.")
